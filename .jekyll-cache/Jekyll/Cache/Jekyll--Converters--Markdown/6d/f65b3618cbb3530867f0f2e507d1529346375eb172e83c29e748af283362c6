I"I<p>Java defines input and output in terms of streams. An input stream is a class that reads data and an output stream is a class that writes data. Streams are used for many different purposes. For example, to read data from a file you can use <code class="language-plaintext highlighter-rouge">java.io.FileInputStream</code>. In terms of networking, streams can be used to send data (output stream) or receive data (input stream). There are two main abstract classes that are used in Java the first is called an OutputStream which has a <code class="language-plaintext highlighter-rouge">write()</code> method and the second is an InputStream which has a <code class="language-plaintext highlighter-rouge">read()</code> method. All output and input streams implement these interfaces, meaning they contain the same behavior.</p>

<p>The InputStream and OutputStream read and write bytes respectively. Generally, one byte at a time isn’t sent over the network because it’s a costly operation. Instead, a group of bytes is sent over. When reading and writing data it is usually stored in a buffer. Bytes are accumulated in memory and are sent over to their destination when a certain amount of bytes have been accumulated or a certain amount of time has passed. This can cause frustrations because if you’re a client and sent a request to a server, the server may have processed that request but if the buffer is not full no data is received by the client. The flush method can be used to avoid this. It can be used when you’re done writing out data. It forces the buffered stream to send its data.</p>
:ET