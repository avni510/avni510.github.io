I"*P<p>The next step of the redux journey was to build out <a href="https://react-redux.js.org/">react-redux</a>. Feel free to have a more detailed
look at my code <a href="https://github.com/avni510/react-website">here</a>. React Redux allows us to
inject the state into our components. I also decided to inject in commands which are in charge of dispatching actions
and making an API call. Dispatching actions will update our store. I’ll explain this further in another blogpost, but right now we
want to inject in the state and a container that contains commands into our components. Inject in these values into props allows us to have a greater chance
of creating a stateless component. In this example there are the types for <code class="language-plaintext highlighter-rouge">State</code> and <code class="language-plaintext highlighter-rouge">AppContainer</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">type</span> <span class="nx">AppContainer</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">photoCommands</span><span class="p">:</span> <span class="nx">PhotoCommands</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">type</span> <span class="nx">State</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">photos</span><span class="p">:</span> <span class="nx">PhotoState</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">type</span> <span class="nx">PhotoState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">isLoading</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">,</span>
  <span class="nx">photo</span><span class="p">?:</span> <span class="kr">string</span>
<span class="p">};</span>
</code></pre></div></div>

<p>We’re going to utilize react context in order to do that.</p>

<p>Context is part of react. It’s an object that is available to components at any part of the component tree. More info can be found <a href="https://reactjs.org/docs/context.html">here</a>. 
This allows us to avoid having to pass down state from the top level component and through the entire chain. Instead we can utilize the context and add the state and the container
straight into the context. I decided to create a component that will add the state and container to the context. I call it <code class="language-plaintext highlighter-rouge">Provider</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nx">type</span> <span class="nx">Props</span><span class="o">&lt;</span><span class="nx">TContainer</span><span class="p">,</span> <span class="nx">TState</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
   <span class="na">container</span><span class="p">:</span> <span class="nx">TContainer</span>
   <span class="na">store</span><span class="p">:</span> <span class="nx">Store</span><span class="o">&lt;</span><span class="nx">TState</span><span class="o">&gt;</span>
 <span class="p">}</span>

 <span class="k">export</span> <span class="kd">const</span> <span class="nx">ContainerContext</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createContext</span><span class="p">({});</span>
 <span class="k">export</span> <span class="kd">const</span> <span class="nx">StoreContext</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createContext</span><span class="p">({});</span>

 <span class="k">export</span> <span class="k">default</span> <span class="kd">class</span> <span class="nx">Provider</span><span class="o">&lt;</span><span class="nx">TContainer</span><span class="p">,</span> <span class="nx">TState</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="o">&lt;</span><span class="nx">Props</span><span class="o">&lt;</span><span class="nx">TContainer</span><span class="p">,</span> <span class="nx">TState</span><span class="o">&gt;</span><span class="p">,</span> <span class="p">{}</span><span class="o">&gt;</span> <span class="p">{</span>

   <span class="kr">public</span> <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
     <span class="k">return</span> <span class="p">(</span>
       <span class="o">&lt;</span><span class="nx">StoreContext</span><span class="p">.</span><span class="nx">Provider</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">store</span><span class="p">}</span><span class="o">&gt;</span>
         <span class="o">&lt;</span><span class="nx">ContainerContext</span><span class="p">.</span><span class="nx">Provider</span> <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">container</span><span class="p">}</span><span class="o">&gt;</span>
           <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span>
         <span class="o">&lt;</span><span class="sr">/ContainerContext.Provider</span><span class="err">&gt;
</span>       <span class="o">&lt;</span><span class="sr">/StoreContext.Provider</span><span class="err">&gt;
</span>     <span class="p">)</span>
   <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div></div>

<p>The top level react component now just needs to be wrapped in <code class="language-plaintext highlighter-rouge">Provider</code> and then our state and container will be available to use through <code class="language-plaintext highlighter-rouge">context</code>.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export default class App extends React.Component {
  private setup: Setup;

  constructor(props: any) {
    super(props);
    this.setup = new Setup();
  }

  public render(): JSX.Element {
    const store = this.setup.executeState();
    const container = this.setup.executeContainer(store);
    return (
      &lt;Provider
        store={store}
        container={container}
      &gt;
        &lt;Router&gt;
          {routes}
          &lt;Landing /&gt;
        &lt;/Router&gt;
      &lt;/Provider&gt;
    );
  }
}
</code></pre></div></div>

<p>To consume the context we would call</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">StoreContext</span><span class="p">.</span><span class="nx">Consumer</span><span class="o">&gt;</span>
  <span class="p">{</span><span class="nx">store</span> <span class="o">=&gt;</span> <span class="p">{</span>
       <span class="c1">// component here </span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="o">&lt;</span><span class="sr">/StoreContext.Consumer</span><span class="err">&gt;
</span></code></pre></div></div>

<p>and</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">ContainerContext</span><span class="p">.</span><span class="nx">Consumer</span><span class="o">&gt;</span>
  <span class="p">{</span><span class="nx">container</span> <span class="o">=&gt;</span> <span class="p">{</span>
       <span class="c1">// component here </span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="o">&lt;</span><span class="sr">/ContainerContext.Consumer</span><span class="err">&gt;
</span></code></pre></div></div>

<p>In order to try to contain this complexity in one spot, a component can pass in arguments to a function about which parts it needs from the state and container. The function can then
inject those into the caller component. Let’s say the component has these <code class="language-plaintext highlighter-rouge">Props</code></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">Props</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">isLoading</span><span class="p">?:</span> <span class="nx">boolean</span><span class="p">,</span>
  <span class="nx">photo</span><span class="p">?:</span> <span class="nx">string</span><span class="p">,</span>
  <span class="nx">photoCommands</span><span class="p">?:</span> <span class="nx">PhotoCommands</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">isLoading</code> and <code class="language-plaintext highlighter-rouge">photo</code> come from the state and <code class="language-plaintext highlighter-rouge">photoCommands</code> comes from the container. The component that has these props is called <code class="language-plaintext highlighter-rouge">PhotoTest</code>. We’re going to create a helper function called
<code class="language-plaintext highlighter-rouge">connect</code> which will take in the target component - <code class="language-plaintext highlighter-rouge">PhotoTest</code>, a function that will inject in specific props from the container, and a function that will inject in the specific props from the state.
<code class="language-plaintext highlighter-rouge">connect</code> will return a new component that has the appropriate values of the props injected in.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export default connect(
  PhotoTest,
  injectCommands&lt;AppContainer, Props&gt; (c =&gt; ({
    photoCommands: c.photoCommands
  })),
  injectState&lt;State, Props&gt;((state, props) =&gt; {
    const isLoading = state.photos.isLoading
    const photo = state.photos.photo
    return {
      isLoading,
      photo
    }
  })
)
</code></pre></div></div>

<p>Here <code class="language-plaintext highlighter-rouge">injectCommands</code> is in charge of taking the <code class="language-plaintext highlighter-rouge">Target</code> component (<code class="language-plaintext highlighter-rouge">PhotoTest</code>) and injecting in <code class="language-plaintext highlighter-rouge">photoCommands</code> as a prop for it use. <code class="language-plaintext highlighter-rouge">injectState</code> is in charge of taking the <code class="language-plaintext highlighter-rouge">Target</code> component 
(<code class="language-plaintext highlighter-rouge">PhotoTest</code>) and injecting in <code class="language-plaintext highlighter-rouge">isLoading</code> and <code class="language-plaintext highlighter-rouge">photo</code>.</p>

<p>Here comes the confusing bit. <code class="language-plaintext highlighter-rouge">injectCommands</code> and <code class="language-plaintext highlighter-rouge">injectState</code> are higher order functions themselves. They take in a function that maps the container to props in the <code class="language-plaintext highlighter-rouge">Target</code> component. It returns another function
that takes in the <code class="language-plaintext highlighter-rouge">Target</code> component and returns a new component. This new component has the existing values for the props of the <code class="language-plaintext highlighter-rouge">Target</code> component, but it also fills in values for the props that are needed from the container
and state respectively.</p>

<p>Here’s the implementation for <code class="language-plaintext highlighter-rouge">injectState</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export type Connector&lt;TProps&gt; = (c: ComponentClass&lt;TProps&gt;) =&gt;
  ComponentClass&lt;TProps&gt;

export type StateInjector&lt;TGlobalState, TProps&gt; = (state: TGlobalState, props: TProps) =&gt;
   Partial&lt;TProps&gt;

/*
 * This returns a function that takes in a component and injects in 
* the appropiate state variables into the component as props
 */
export function injectState&lt;TGlobalState, TProps&gt;(func: StateInjector&lt;TGlobalState, TProps&gt;): Connector&lt;TProps&gt; {
  return (Target: ComponentClass&lt;TProps&gt;) =&gt; {
    return class injectStateHOC extends React.Component&lt;TProps, ComponentState&gt; {
      public render(): JSX.Element {
        return (
          &lt;StoreContext.Consumer&gt;
            // values from the state are passed in here as props
            {store =&gt; (&lt;Target
                {...this.props}
                {...this.inject(store as Store&lt;TGlobalState&gt;)}
              /&gt;)
            }
          &lt;/StoreContext.Consumer&gt;
        )
      }

      private inject(store: Store&lt;TGlobalState&gt;): Partial&lt;TProps&gt; {
        if(!store) {
          throw 'Store not found'
        }

        /* 
        // this is the function specified in the target component. Ex:
        //  (state, props) =&gt; {
        //     const isLoading = state.photos.isLoading
        //     const photo = state.photos.photo
        //     return {
        //       isLoading,
        //       photo
        //     }
        //   }
        */
        return func(store.getState(), this.props)
      }
    }
  }
}
</code></pre></div></div>

<p>The implementation for <code class="language-plaintext highlighter-rouge">injectCommands</code> is practically identical.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="nx">type</span> <span class="nx">CommandsInjector</span><span class="o">&lt;</span><span class="nx">TContainer</span><span class="p">,</span> <span class="nx">TProps</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">(</span><span class="nx">container</span><span class="p">:</span> <span class="nx">TContainer</span><span class="p">)</span> <span class="o">=&gt;</span>
  <span class="nx">Partial</span><span class="o">&lt;</span><span class="nx">TProps</span><span class="o">&gt;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">injectCommands</span><span class="o">&lt;</span><span class="nx">TContainer</span><span class="p">,</span> <span class="nx">TProps</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">func</span><span class="p">:</span> <span class="nx">CommandsInjector</span><span class="o">&lt;</span><span class="nx">TContainer</span><span class="p">,</span> <span class="nx">TProps</span><span class="o">&gt;</span><span class="p">):</span> <span class="nx">Connector</span><span class="o">&lt;</span><span class="nx">TProps</span><span class="o">&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="na">Target</span><span class="p">:</span> <span class="nx">ComponentClass</span><span class="o">&lt;</span><span class="nx">TProps</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kd">class</span> <span class="nx">injectHOC</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="o">&lt;</span><span class="nx">TProps</span><span class="p">,</span> <span class="nx">ComponentState</span><span class="o">&gt;</span> <span class="p">{</span>
      <span class="kr">public</span> <span class="nx">render</span><span class="p">():</span> <span class="nx">JSX</span><span class="p">.</span><span class="nx">Element</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
          <span class="o">&lt;</span><span class="nx">ContainerContext</span><span class="p">.</span><span class="nx">Consumer</span><span class="o">&gt;</span>
           <span class="c1">// values from the container are passed in here as props</span>
            <span class="p">{</span><span class="nx">container</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">Target</span>
              <span class="p">{...</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">}</span>
              <span class="p">{...</span><span class="k">this</span><span class="p">.</span><span class="nx">inject</span><span class="p">(</span><span class="nx">container</span> <span class="k">as</span> <span class="nx">TContainer</span><span class="p">)}</span>
            <span class="sr">/&gt;</span><span class="err">)
</span>            <span class="p">}</span>
          <span class="o">&lt;</span><span class="sr">/ContainerContext.Consumer</span><span class="err">&gt;
</span>        <span class="p">)</span>
      <span class="p">}</span>

      <span class="kr">private</span> <span class="nx">inject</span><span class="p">(</span><span class="na">container</span><span class="p">:</span> <span class="nx">TContainer</span><span class="p">):</span> <span class="nx">Partial</span><span class="o">&lt;</span><span class="nx">TProps</span><span class="o">&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">container</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">throw</span> <span class="dl">'</span><span class="s1">Container not found</span><span class="dl">'</span>
        <span class="p">}</span>
       <span class="cm">/* 
       // this is the function specified in the target component. Ex:
       // (c =&gt; ({
       //   photoCommands: c.photoCommands
       // })),
       */</span>
        <span class="k">return</span> <span class="nx">func</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So now we’re able to take a <code class="language-plaintext highlighter-rouge">Target</code> component and give it values from the state and container through the <code class="language-plaintext highlighter-rouge">context</code>.</p>

<p>Based on the fact that <code class="language-plaintext highlighter-rouge">injectState</code> and <code class="language-plaintext highlighter-rouge">injectCommands</code> follow the same higher order function pattern (returns a function that takes in the <code class="language-plaintext highlighter-rouge">Target</code> component). 
The <code class="language-plaintext highlighter-rouge">connect</code> function now has a simple implementation using <code class="language-plaintext highlighter-rouge">reduce</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export function connect&lt;TProps&gt;(
    targetComponent: ComponentClass&lt;TProps&gt;,
    ...connectors: Connector&lt;TProps&gt;[]
): ComponentClass&lt;TProps&gt; {
    return connectors.reduce((component, nextConnector) =&gt; nextConnector(component), targetComponent);
}
</code></pre></div></div>

<p>We now have a <code class="language-plaintext highlighter-rouge">targetComponent</code> and <code class="language-plaintext highlighter-rouge">connectors</code>, which in this case is <code class="language-plaintext highlighter-rouge">injectState</code> and <code class="language-plaintext highlighter-rouge">injectCommands</code>. Both of these functions return a new function that returns a new component. We can continue to pass along
the new component to the <code class="language-plaintext highlighter-rouge">nextConnector</code> which will again return a new component. The beauty of this pattern is nothing is mutated. New components are created and added to.</p>

<p>This certainly took me a bit of time to think through and sit with. So it’s ok if it doesn’t click right away! But it’s a powerful pattern that allows us to greatly simplify our code and 
inject in props from the state and commands into our component.</p>
:ET