I"– <p>The interface segregation principle is the ‚ÄúI‚Äù in the SOLID Principles. Bob Martin defined it as ‚ÄúMany client specific interfaces are better than one general purpose interface.‚Äù In other words, clients should not be forced to implement interfaces they don‚Äôt use. Having one large, bloated interface with methods that implementing classes don‚Äôt require can be dangerous for a few reasons. Firstly, to a client it can signal that an implementing class may have certain behavior, which may not be the case. So it can misrepresent your intent. Secondly, if the interface changes it can cause unncessary work for the classes that implement the interface, but don‚Äôt need all the methods from that interface. The solution to this problem is to have your methods split up into multiple interfaces rather than having one large interface.</p>

<p>Here‚Äôs an example of a violation of the interface segregation principle</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Animal</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="nf">fly</span><span class="o">();</span>
  <span class="kt">void</span> <span class="nf">walk</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Bird</span> <span class="kd">implements</span> <span class="nc">Animal</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I am flying"</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I am walking on a tree"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Bee</span> <span class="kd">implements</span> <span class="nc">Animal</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I am buzzing"</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I am crawling on a flower"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>


<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="kd">implements</span> <span class="nc">Animal</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I am walking on my four feet"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">Dog</code> cannot fly and therefore, should not need to implement the <code class="language-plaintext highlighter-rouge">fly()</code> method.</p>

<p>Instead we can split up the interfaces to be smaller and more representative of the classes that implement those methods. Below I‚Äôve split the <code class="language-plaintext highlighter-rouge">Animal</code> interface into <code class="language-plaintext highlighter-rouge">FlyableAnimal</code> and <code class="language-plaintext highlighter-rouge">WalkableAnimal</code>. Therefore, <code class="language-plaintext highlighter-rouge">Dog</code> does not need to implement the <code class="language-plaintext highlighter-rouge">fly()</code> method.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FlyableAnimal</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="nf">fly</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">WalkableAnimal</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="nf">walk</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Bird</span> <span class="kd">implements</span> <span class="nc">FlyableAnimal</span><span class="o">,</span> <span class="nc">WalkableAnimal</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I am flying"</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I am walking on a tree"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Bee</span> <span class="kd">implements</span> <span class="nc">FlyableAnimal</span><span class="o">,</span> <span class="nc">WalkableAnimal</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fly</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I am buzzing"</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I am crawling on a flower"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>


<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="kd">implements</span> <span class="nc">WalkableAnimal</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I am walking on my four feet"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This is a simple principle to reduce duplication in your code and increase readability.</p>
:ET