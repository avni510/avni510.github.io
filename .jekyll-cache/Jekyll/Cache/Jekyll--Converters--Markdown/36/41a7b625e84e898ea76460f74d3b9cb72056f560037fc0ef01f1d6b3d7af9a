I"÷<p>The Enumerable Module is a mixin. The methods from the module are used in the Array and Hash classes. You can actually use the Enumerable module in any of your classes as long as you have <code class="language-plaintext highlighter-rouge">#each</code> defined. All the methods in the module create a new data structure - ex: an array or hash - and the old one is not mutated. You would want to use the methods from the Enumerable module when you are iterating through a collection of objects and manipulating the data in that collection.</p>

<p>Lets say we want an array of shortened words</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Phrase</span>
  <span class="k">def</span> <span class="nf">shorten</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">shortened_phrase</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">data</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
      <span class="n">shortened_phrase</span> <span class="o">&lt;&lt;</span> <span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="mi">2</span><span class="p">]</span>
    <span class="k">end</span>
    
    <span class="n">shortened_phrase</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">phrase</span> <span class="o">=</span> <span class="no">Phrase</span><span class="p">.</span><span class="nf">new</span>
<span class="n">phrase</span><span class="p">.</span><span class="nf">shorten</span><span class="p">([</span><span class="s2">"Hello"</span><span class="p">,</span> <span class="s2">"World"</span><span class="p">])</span>
<span class="c1"># =&gt; ["Hel", "Wor"]</span></code></pre></figure>

<p>We can shorten the length of <code class="language-plaintext highlighter-rouge">#shorten</code> by calling <code class="language-plaintext highlighter-rouge">#map</code> from the Enumerable module</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Phrase</span>
  <span class="k">def</span> <span class="nf">shorten</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">data</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="mi">2</span><span class="p">]</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>This method applies the block (whatâ€™s in the parenthesis) to each element in the original array and returns a new array (the original array is untouched)</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">phrase</span> <span class="o">=</span> <span class="no">Phrase</span><span class="p">.</span><span class="nf">new</span>
<span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Hello"</span><span class="p">,</span> <span class="s2">"World"</span><span class="p">]</span>
<span class="n">phrase</span><span class="p">.</span><span class="nf">shorten</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
<span class="c1"># =&gt; ["Hel", "Wor"]</span>
<span class="nb">print</span> <span class="n">words</span>
<span class="c1"># =&gt; ["Hello", "World"]</span></code></pre></figure>

<p>Here are a few other useful methods from the Enumerable module</p>

<h5 id="select"><code class="language-plaintext highlighter-rouge">#select</code></h5>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">[</span><span class="s2">"Hello"</span><span class="p">,</span> <span class="s2">"World"</span><span class="p">,</span> <span class="s2">"foo"</span><span class="p">,</span> <span class="s2">"bar"</span><span class="p">].</span><span class="nf">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="p">.</span><span class="nf">length</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="p">}</span>
<span class="c1"># =&gt; ["Hello", "World"]</span></code></pre></figure>

<p>This method only keeps the elements that evaluate to true</p>

<h5 id="reduce"><code class="language-plaintext highlighter-rouge">#reduce</code></h5>
<p>This method aggregates values based on the operation passed in the block. The value passed into <code class="language-plaintext highlighter-rouge">#reduce</code> is the starting value of the aggregation</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">].</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">sum</span><span class="p">,</span> <span class="n">num</span><span class="o">|</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">num</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">}</span>
<span class="c1"># =&gt; 35</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">#reduce</code> is doing this</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mi">5</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">8</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">2</span>
<span class="c1"># =&gt; 35</span></code></pre></figure>

<p>If no value is passed into <code class="language-plaintext highlighter-rouge">#reduce</code> it will automatically start with 0.</p>

:ET