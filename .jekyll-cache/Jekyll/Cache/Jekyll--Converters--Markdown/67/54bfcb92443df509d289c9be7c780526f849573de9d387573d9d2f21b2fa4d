I"é&<p>Today I watched the <a href="https://www.youtube.com/watch?v=OMPfEXIlTVE">Nothing is Something</a> talk by Sandi Metz. During the first half of her talk she goes into the Null Object Pattern. This pattern specifically handles how to deal with nil or null values in your program. When over looked they can cause majors errors in your code and should be handled carefully. Hereâ€™s an example when nil can cause a problem</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">LogTimeEntry</span>
  <span class="nb">attr_reader</span> <span class="ss">:id</span>
  <span class="nb">attr_reader</span> <span class="ss">:date</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">date</span><span class="p">)</span>
    <span class="vi">@id</span> <span class="o">=</span> <span class="nb">id</span>
    <span class="vi">@date</span> <span class="o">=</span> <span class="n">date</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">LogTimeRepo</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@entries</span> <span class="o">=</span> 
      <span class="p">[</span> 
        <span class="no">LogTimeEntry</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s2">"01-01-2017"</span><span class="p">),</span> 
        <span class="no">LogTimeEntry</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">"12-31-2017"</span><span class="p">),</span> 
        <span class="no">LogTimeEntry</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s2">"01-04-2017"</span><span class="p">)</span> 
      <span class="p">]</span>
  <span class="k">end</span> 

  <span class="k">def</span> <span class="nf">find_by</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
   <span class="vi">@entries</span><span class="p">.</span><span class="nf">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">entry</span><span class="o">|</span> <span class="n">entry</span><span class="p">.</span><span class="nf">id</span> <span class="o">==</span> <span class="nb">id</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">EmployeeReport</span>
  <span class="k">def</span> <span class="nf">display_date</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="n">log_time_entry</span> <span class="o">=</span> <span class="n">log_time_repo</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="s2">"</span><span class="si">#{</span><span class="n">log_time_entry</span><span class="p">.</span><span class="nf">date</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span> 
<span class="k">end</span></code></pre></figure>

<p>Here we have a <code class="language-plaintext highlighter-rouge">LogTimeEntry</code> class that has the instance variable date. <code class="language-plaintext highlighter-rouge">LogTimeRepo</code> has a <code class="language-plaintext highlighter-rouge">#find_by</code> method that  will return an instance of <code class="language-plaintext highlighter-rouge">LogTimeEntry</code>. Therefore, in <code class="language-plaintext highlighter-rouge">#display_date</code> we are anticipating an instance of <code class="language-plaintext highlighter-rouge">LogTimeEntry</code>. What if an id is passed into <code class="language-plaintext highlighter-rouge">#display_date</code> that does not exist (ex. id = 5)? Then we will recieve back a nil value. In this case the program will crash because we attempt to call <code class="language-plaintext highlighter-rouge">date</code> on a nil value.</p>

<p>Lets say that we decide to handle in the nil value in <code class="language-plaintext highlighter-rouge">EmployeeReport</code></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">EmployeeReport</span>
  <span class="k">def</span> <span class="nf">display_date</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="n">log_time_entry</span> <span class="o">=</span> <span class="n">log_time_repo</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">log_time_entry</span>
      <span class="nb">puts</span> <span class="s2">"</span><span class="si">#{</span><span class="n">log_time_entry</span><span class="p">.</span><span class="nf">date</span><span class="si">}</span><span class="s2">"</span>
    <span class="k">else</span>
      <span class="nb">puts</span> <span class="s2">"No date"</span>
    <span class="k">end</span>
  <span class="k">end</span> 
<span class="k">end</span></code></pre></figure>

<p>This works but imagine we are to call <code class="language-plaintext highlighter-rouge">#date</code> on a potentially nil value across many parts of the program. This could cause a lot of duplication. Along with that what if we wanted to handle the nil a different way in the future. This would mean a lot of searching around in the code would have to take place.</p>

<p>Instead hereâ€™s a work around</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">LogTimeEntry</span>
  <span class="nb">attr_reader</span> <span class="ss">:id</span>
  <span class="nb">attr_reader</span> <span class="ss">:date</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">date</span><span class="p">)</span>
    <span class="vi">@id</span> <span class="o">=</span> <span class="nb">id</span>
    <span class="vi">@date</span> <span class="o">=</span> <span class="n">date</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">NoLogTimeEntry</span>
  <span class="nb">attr_reader</span> <span class="ss">:date</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@date</span> <span class="o">=</span> <span class="s2">"No date"</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">LogTimeRepo</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@entries</span> <span class="o">=</span> 
      <span class="p">[</span> 
        <span class="no">LogTimeEntry</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s2">"01-01-2017"</span><span class="p">),</span> 
        <span class="no">LogTimeEntry</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">"12-31-2017"</span><span class="p">),</span> 
        <span class="no">LogTimeEntry</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s2">"01-04-2017"</span><span class="p">)</span> 
      <span class="p">]</span>
  <span class="k">end</span> 

  <span class="k">def</span> <span class="nf">find_by</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="vi">@entries</span><span class="p">.</span><span class="nf">find</span> <span class="p">{</span> <span class="o">|</span><span class="n">entry</span><span class="o">|</span> <span class="n">entry</span><span class="p">.</span><span class="nf">id</span> <span class="o">==</span> <span class="nb">id</span> <span class="p">}</span> <span class="o">||</span> <span class="no">NoLogTimeEntry</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">EmployeeReport</span>
  <span class="k">def</span> <span class="nf">display_date</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="n">log_time_entry</span> <span class="o">=</span> <span class="n">log_time_repo</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="s2">"</span><span class="si">#{</span><span class="n">log_time_entry</span><span class="p">.</span><span class="nf">date</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span> 
<span class="k">end</span></code></pre></figure>

<p>We create an additional object - <code class="language-plaintext highlighter-rouge">NoLogTimeEntry</code> that contains <code class="language-plaintext highlighter-rouge">#date</code> as well. This way <code class="language-plaintext highlighter-rouge">log_time_entry</code> will have the <code class="language-plaintext highlighter-rouge">#date</code> method regardless of whether or not it is a nil value. This allows our program to handle nil values in a cleaner way and avoid having to explicitly check for them. It also makes it easy to change the way we handle nil values in the future (ex: changing the message that is displayed to the user if there is no date).</p>
:ET