I"<!---
* used in method declaration
* specifies the exceptions that a method might throw
* include a throws clause to delcare those exceptions that might be thrown but don't get caught in the method
* clearer to read, if other methods want to implement a method that throws exceptions they must be able to handle these exceptions

When should it be used? 
* If you are catching an exception type in your method you do not need a throw
* If there is no try/catch then the throws is necessary and the exception will be handled by the calling method
* Write it if youur method throws a checked exception

Checked vs. Unchecked Exceptions

Checked Exceptions
- checked at compile time
- if the code within a method throws a checked expection then the method mush either handle the exception or must specifiy the exception using `throws`

Unchecked Exceptions
- exceptions that are not checked at compile time
- diagram Error and RuntimeExceptions are unchecked 
--->

<p>The <code class="language-plaintext highlighter-rouge">throws</code> keyword is used in method declaration. It specifies that an exception may be thrown by a particular method.</p>

<h4 id="when-should-it-be-used">When should it be used?</h4>

<p>If you are catching an exception in your method then you do not need a <code class="language-plaintext highlighter-rouge">throws</code> keyword. For example, if you have a <code class="language-plaintext highlighter-rouge">try/catch</code> within your method then the keyword <code class="language-plaintext highlighter-rouge">throws</code> when defining the method is not necessary. But if there is no <code class="language-plaintext highlighter-rouge">try/catch</code> block and the exception is a checked exception (explained further down) then <code class="language-plaintext highlighter-rouge">throws</code> in the method definition is necessary.</p>

<h4 id="checked-exceptions">Checked Exceptions</h4>

<p>These are exceptions that are checked during compile time. If the code within a method throws a checked exception then the method must either handle the exception or must specify the exception using <code class="language-plaintext highlighter-rouge">throws</code>.</p>

<h4 id="unchecked-exceptions">Unchecked Exceptions</h4>

<p>These are exceptions that are not checked at compile time.</p>

<p><img src="/assets/java_exceptions.gif" alt="java exceptions" /></p>

<p>From the Java documentation “The Throwable class is the superclass of all errors and exceptions in the Java Language”. However you don’t need to specify <code class="language-plaintext highlighter-rouge">throws</code> for all subclasses of Throwable. Any exception that is a subclass of Error or RuntimeException are not checked at compiled time - meaning they are unchecked exceptions. All other exceptions are checked exceptions.</p>
:ET